{"version":3,"sources":["components/Title.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Title","props","className","href","appName","TextForm","useState","text","setText","htmlFor","heading","id","placeholder","value","onChange","event","console","log","target","rows","type","onClick","uppercaseText","toUpperCase","lowercaseText","toLowerCase","navigator","clipboard","writeText","extrSpaceText","split","join","filter","element","length","Math","round","Number","EPSILON","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAEe,SAASA,EAAMC,GAC5B,OACE,mCAGE,qBAAKC,UAAU,QAAf,SACE,oBAAGA,UAAU,QAAQC,KAAK,IAA1B,UACG,IACAF,EAAMG,QAAS,W,iBCPX,SAASC,EAASJ,GAG/B,MAAwBK,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAsCA,OACE,qCACE,sBAAKN,UAAU,OAAf,UACE,uBAAOO,QAAQ,UAAUP,UAAU,aAAnC,SACE,6BAAKD,EAAMS,YAEb,0BACER,UAAU,eACVS,GAAG,UACHC,YAAY,wBACZC,MAAON,EACPO,SAfe,SAACC,GACtBC,QAAQC,IAAI,aACZT,EAAQO,EAAMG,OAAOL,QAcfM,KAAK,UAIT,sBAAKjB,UAAU,mBAAf,UACE,wBAAQkB,KAAK,SAASlB,UAAU,OAAOmB,QApDrB,WACtB,IAAIC,EAAgBf,EAAKgB,cACzBf,EAAQc,IAkDJ,kCAGA,wBAAQF,KAAK,SAASlB,UAAU,OAAOmB,QAjDrB,WACtB,IAAIG,EAAgBjB,EAAKkB,cACzBjB,EAAQgB,IA+CJ,kCAGA,wBAAQJ,KAAK,SAASlB,UAAU,OAAOmB,QA9C3B,WAChBb,EAAQ,KA6CJ,wBAIA,wBAAQY,KAAK,SAASlB,UAAU,OAAOmB,QA7C5B,WACfK,UAAUC,UAAUC,UAAUrB,IA4C1B,uBAGA,wBAAQa,KAAK,SAASlB,UAAU,OAAOmB,QA3CpB,WAGvB,IAAIQ,EAAgBtB,EAAKuB,MAAM,QAE/BtB,EAAQqB,EAAcE,KAAK,OAsCvB,mCAMF,sBAAK7B,UAAU,iBAAf,UACE,4DACA,wCACU,IACR,iCAEIK,EAAKuB,MAAM,OAAOE,QAAO,SAACC,GACxB,OAA0B,IAAnBA,EAAQC,UACdA,SAEG,IARZ,mBASkB,uCAAU3B,EAAK2B,aAEjC,+CACiB,IACf,mCACGC,KAAKC,MAC0D,KAA7D,KAAQ7B,EAAKuB,MAAM,OAAOI,OAAS,KAAQG,OAAOC,UACjD,IAAK,IAHX,sBCxEKC,MAlBf,WACE,OACE,qCAGE,qBAAKrC,UAAU,QAAf,SACE,cAACF,EAAD,CAAOI,QAAQ,oBAIjB,qBAAKF,UAAU,iBAAf,SAEE,cAACG,EAAD,CAAUK,QAAQ,uCCLX8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9f21f779.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Title(props) {\r\n  return (\r\n    <>\r\n      {/* Navbar Componenet with bootstrap */}\r\n\r\n      <div className=\"title\">\r\n        <a className=\"title\" href=\"/\">\r\n          {\" \"}\r\n          {props.appName}{\" \"}\r\n        </a>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./Button.css\";\r\n\r\nexport default function TextForm(props) {\r\n  // Creating a state , here text is a variable which holds the value of useState and\r\n  //   setText is a method via which we can update the value of text.\r\n  const [text, setText] = useState(\"\");\r\n\r\n  // Defining convert to  uppercase function\r\n  const textToUppercase = () => {\r\n    let uppercaseText = text.toUpperCase();\r\n    setText(uppercaseText);\r\n  };\r\n\r\n  // Defining convert to  lowerrcase function\r\n  const textToLowercase = () => {\r\n    let lowercaseText = text.toLowerCase();\r\n    setText(lowercaseText);\r\n  };\r\n\r\n  // To clear text function\r\n  const clearText = () => {\r\n    setText(\"\");\r\n  };\r\n\r\n  // To copy text from editor\r\n  const copyText = () => {\r\n    navigator.clipboard.writeText(text);\r\n  };\r\n\r\n  // To Remove extra space\r\n  const removeExtraSpace = () => {\r\n    // Regular expression to detect all the words with one or more than extra space and make array of such words\r\n\r\n    let extrSpaceText = text.split(/[ ]+/);\r\n    // add those array of words with single space\r\n    setText(extrSpaceText.join(\" \"));\r\n  };\r\n\r\n  // Handling onChange event\r\n  const handleOnChange = (event) => {\r\n    console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"textBox\" className=\"form-label\">\r\n          <h3>{props.heading}</h3>\r\n        </label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"textBox\"\r\n          placeholder=\"Enter your text here.\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          rows=\"10\"\r\n        />\r\n      </div>\r\n      {/* Button function */}\r\n      <div className=\"button-container\">\r\n        <button type=\"button\" className=\"btn \" onClick={textToUppercase}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button type=\"button\" className=\"btn \" onClick={textToLowercase}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button type=\"button\" className=\"btn \" onClick={clearText}>\r\n          Clear Text\r\n        </button>\r\n\r\n        <button type=\"button\" className=\"btn \" onClick={copyText}>\r\n          Copy Text\r\n        </button>\r\n        <button type=\"button\" className=\"btn \" onClick={removeExtraSpace}>\r\n          Remove Extra Space\r\n        </button>\r\n      </div>\r\n\r\n      {/* Text analysis part */}\r\n      <div className=\"container my-3\">\r\n        <h3>Analysis of your text is :</h3>\r\n        <p>\r\n          Words :{\" \"}\r\n          <strong>\r\n            {\r\n              text.split(/\\s+/).filter((element) => {\r\n                return element.length !== 0;\r\n              }).length\r\n            }\r\n          </strong>{\" \"}\r\n          and Characters :<strong> {text.length}</strong>\r\n        </p>\r\n        <p>\r\n          Reading Time :{\" \"}\r\n          <strong>\r\n            {Math.round(\r\n              (0.008 * text.split(/\\s+/).length - 0.008 + Number.EPSILON) * 100\r\n            ) / 100}{\" \"}\r\n            minutes\r\n          </strong>\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport React from \"react\";\nimport Title from \"./components/Title\";\nimport TextForm from \"./components/TextForm\";\n\nfunction App() {\n  return (\n    <>\n      {/* Importing Title dynamically using componen from components */}\n\n      <div className=\"title\">\n        <Title appName=\"Text Analyser\" />\n      </div>\n\n      {/* Main text editor part */}\n      <div className=\"container my-3\">\n        {/* TextForm through componenets */}\n        <TextForm heading=\"Enter your text to analyse :\" />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}